ISA
=============================================
There are a few ideas to explore in this processor design:

- We have 15 addressable registers, instead of 16. This allows us to use the 16th code (0xf) to be used as an
  escape to gain all sorts of compact, yet easy to decode spaces in the instruction code
- We have two execution contexts: one, called TASK mode, the other, called SCHEDULER mode
- We don't have interrupt enable/disable instructions. Instead, in TASK mode interrupts are always enabled
  while in SCHEDULER mode interrupts are always disabled
  This means that the processor should spend very little time in SCHEDULER mode, essentially just as much
  as it needs to figure out what to do next, and tee up the appropriate task to handle the situation.
  This is where the naming of the two contexts are coming from: SCHEDULER mode is used for - essentially -
  task switching only, and all useful work (including OS functionality) happens in various TASK contexts.
- Each context has it's own program counter (TPC and SPC).
- Switching between contexts happens using interrupts (TASK -> SCHEDULER), exceptions (TASK -> SCHEDULER)
  and instructions (switches either way).
- Every instruction can be executed with the exact same semantics in both TASK and SCHEDULER mode. Protection
  is achieved by two key concepts:
  - There is a slight imbalance in the ISA: there is a way to influence the current contexts' PC and
    TPC, there is no way to influence SPC (unless of course that happens to be the current context PC)
  - All resources (I/O, memory, even CSRs) are accessed through memory references. These references go through
    an MMU, which controls per-task access rights. This way OS tasks can have higher access to system resources
    then user code. SCHEDULER mode accesses also go through the MMU, but use a different page table address.
    The switch between TASK and SCHEDULER mode MMU page tables is automatic, so when SCHEDULER mode gains
    back execution, it's not limited to the access rights of the last executed task.
- There is no interrupt or exception vector. Instead, when TASK mode execution gets interrupted, SCHEDULER
  mode execution continues from the current SPC. Since the only way to return from SCHEDULER mode to TASK mode
  is by the use of the STU instruction, this means that after an interrupt or exception, executing continues
  in SCHEDULER mode after this STU instruction. SCHEDULER mode code needs to be written as an endless loop,
  where STU can be thought of as a procedure call.
- The ISA strictly operates on the 2-read;1-write port register file principle. This means no PUSH/PULL primitives
  (as PULL would require two writes into the register file).
- The ISA doesn't have CALL/RETURN primitives either (again, return would require two writes).

TODO: if we have floating-point support, we need condition-code registers! See gcc/config/brew/brew.h AVOID_CCMODE_COPIES and how Moxie does it!
TODO: we probably want a +2;+4 and a -2;-4 variant as well if we can find a 16-bit slots for them.
TODO: I NEED A 16-BIT LOAD IMMEDIATE!!!!!

INSTRUCTION ENCODING
=============================================

There are three encoding variants:

16-bit instructions:

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|    FIELD_C    |    FIELD_B    |    FIELD_A    |    FIELD_D    |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

32-bit instructions:

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|    FIELD_C    |    FIELD_B    |    FIELD_A    |    FIELD_D    |  |                         FIELD_E                               |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

48-bit instructions:

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|    FIELD_C    |    FIELD_B    |    FIELD_A    |    FIELD_D    |  |                                                            FIELD_E                                                            |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

FIELD_C normally contains the instruction op-code
FIELD_B normally contains the register index of the second operand
FIELD_A normally contains the register index of the first operand
FIELD_D normally contains the register index of the destination
FIELD_E normally contains an immediate or a memory offset

The whole 16 bit instruction is referred to as the INST.
The '[]' operator represents sub-fields in verilog notation.
The '{}' operator represents concatenation in verilog notation.
The ':' operator represents range (when that context make sense)

Register indexes:

0x0:  $r0
0x1:  $r1
0x2:  $r2
0x3:  $r3
0x4:  $r4
0x5:  $r5
0x6:  $r6
0x7:  $r7
0x8:  $r8
0x9:  $r9
0xa:  $ra
0xb:  $rb
0xc:  $rc
0xd:  $rd
0xe:  $re
0xf:  reserved

Register aliases:
    $srX: signed version of $rX
    $frX: floating point version of $rX
    $sp:  alias to $r0
    $fp:  alias to $r1
    $lr:  alias to $r2
NOTE: none of these aliases have anything to do with HW and only make assembly unambigous and/or easier to read

NOTE: $pc and $tpc are 31-bit registers: the LSB is ignored on write and always reads as 0.

INSTRUCTION SET
=============================================

In the following tables
- '.' means any value in [0x0:0xe], unless specifically listed as a special case.
      Can be a different number at every occurance.



ALU operations:
-------------------------------

Form A:

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|       C       |       B       |       A       |       D       |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  FIELD
  CBAD             OP_CODE   OPERATION
-----------------------------------------

0x0000             FILL                            enters privileged mode, disables interrupts - used to fill unused code-pages; TPC points to the next instruction
0x0001             BREAK                           enters privileged mode, disables interrupts - used for SW breakpoints; TPC points to the next instruction
0x0002             SYSCALL                         enters privileged mode, disables interrupts - used for SYSCALL-s; TPC points to the next instruction
0x0003             STU                             enters user mode, enables interrupts; SPC points to the next instruction
0x0004             SII                             enters privileged mode, disables interrupts - used to indicate invlid instructions; TPC points to the CURRENT instruction
0x0005             WOI                             wake on interrupt
0x0006             FENCE                           ensures that all memory references are completed before continuing
0x0007             WFENCE                          ensures the write queue is fully flushed before continuing
0x0008:0x000e      SII

0x001.             SII
0x002.             $pc <- $rD                      <------- indirect jump: we probably want to encode it to something that's easier to recognize by the branch predictor
0x003.             $tpc <- $rD
0x004.             $rD <- $tpc
0x005.             $rD <- $pc
0x006.:0x00e.      SII

0x01..             $rD <- $rA + 1                  $rD <- $rA + 1
0x02..             $rD <- $rB - 1                  $rD <- $rB - 1
0x03..             $rD <- -$rA                     $rD <- -$rA (neg)
0x04..             $rD <- ~$rB                     $rD <- ~$rB (not)
0x05..             $rD <- BSWAP $rA                $rD <- {$rA[7:0], $rA[15:8], $rA[23:16], $rA[31:24]}
0x06..             $rD <- WSWAP $rB                $rD <- {$rB[15:0], $rB[31:16]} TODO: maybe better if this is zero-extend byte?
0x07..             $rD <- BSI $rA                  sign-extend a word value in $rA into $rD
0x08..             $rD <- WSI $rB                  sign-extend a byte value in $rB into $rD
0x09..             $srD <- FLOOR $frA              float to (signed) integer conversion with truncation
0x0a..             $frD <- $srB                    (signed) integer to float conversion
0x0b..             $frD <- 1 / $frA
0x0c..             $frD <- RSQRT $frB
0x0d..             $rD <- $pc + FIELD_B            Link register preparation for calls. FIELD_B is sign-extended to 31 bits and shifted left by 1 before addition.
0x0e..             SII                             TODO: maybe this should be zero-extend word?

0x1...             $rD <- $rB ^ $rA
0x2...             $rD <- $rB | $rA
0x3...             $rD <- $rB & $rA
0x4...             $rD <- $rB + $rA
0x5...             $rD <- -$rB + $rA
0x6...             $rD <- $rB << $rA
0x7...             $rD <- $rB >> $rA
0x8...             $srD = $srB >> $rA              signed right shift
0x9...             $rD <- $rB * $rA                unsigned multiply, lower half
0xa...             $rD <- UPPER $rB * $rA          unsigned multiply, upper half
0xb...             $srD <- UPPER $srB * $srA       signed multiply, upper half
0xc...             $frD <- $frB + $frA
0xd...             $frD <- -$frB + $frA 
0xe...             $frD <- $frB * $frA

Pseudo instructions:
NOP: encodes to 0x2222, which is $r2 = $r2 | $r2
$rD = 0: encodes to 0x1eeD which is $rD <- $r14 ^ $r14
$rD = $rS: encodes to 0x2SSD

Form B:
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|       C       |       B       | 1 | 1 | 1 | 1 |       D       |  |                                                             VALUE                                                             |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  FIELD
  CBAD             OP_CODE   OPERATION
-----------------------------------------
0x00f.             $rD <- VALUE                       NOTE: this is the unary operator space normally.
0x01f.             $pc <- VALUE
0x02f.:0xef.       SII
0x1.f.             $rD <- $rB ^ VALUE
0x2.f.             $rD <- $rB | VALUE
0x3.f.             $rD <- $rB & VALUE
0x4.f.             $rD <- $rB + VALUE
0x5.f.             $rD <- -$rB + VALUE
0x6.f.             $rD <- $rB << VALUE
0x7.f.             $rD <- $rB >> VALUE
0x8.f.             $srD <- $srB >> VALUE              signed right shift
0x9.f.             $rD <- $rB * VALUE                 unsigned multiply, lower half
0xa.f.             $srD <- UPPER $srB * VALUE         unsigned multiply, upper half
0xb.f.             $srD <- UPPER $rB * VALUE          signed multiply, upper half
0xc.f.             $frD <- $frB + VALUE
0xd.f.             $frD <- -$frB + VALUE
0xe.f.             $frD <- $frB * VALUE

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|       C       | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |       D       |  |                                                             VALUE                                                             |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  FIELD
  CBAD             OP_CODE   OPERATION
-----------------------------------------
0x.ff.             SII


Form C:
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|       C       | 1 | 1 | 1 | 1 |       A       |       D       |  |                         VALUE                                 |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  FIELD
  CBAD             OP_CODE   OPERATION
-----------------------------------------
0x0f0.             $frD <- VALUE                     NOTE: this is the unary operator space normally.
0x0f1.             $pc <- VALUE
0x0f2.:0xfe.       SII
0x1f..             $rD <- $rA ^ VALUE
0x2f..             $rD <- $rA | VALUE
0x3f..             $rD <- $rA & VALUE
0x4f..             $rD <- $rA + VALUE
0x5f..             $rD <- -$rA + VALUE
0x6f..             $rD <- $rA << VALUE
0x7f..             $rD <- $rA >> VALUE
0x8f..             $srD = $srA >> VALUE              signed right shift
0x9f..             $rD <- $rA * VALUE                unsigned multiply, lower half
0xaf..             $srD = UPPER $srA * VALUE         unsigned multiply, upper half
0xbf..             $srD = UPPER $rA * VALUE          signed multiply, upper half
0xcf..             $frD = $frA + VALUE
0xdf..             $frD = -$frA + VALUE
0xef..             $frD = $frA * VALUE


Branches:
-------------------------------

Form A:

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|       C       |       B       |       A       | 1 | 1 | 1 | 1 |  |                          OFFSET                               |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  FIELD
  CBAD            OP_CODE                                    NOTES
------------------------------------------------------------------------------
0x00.f            if $rA == 0  $pc <- $pc + OFFSET*2
0x01.f            if $rA != 0  $pc <- $pc + OFFSET*2
0x02.f            if $srA < 0  $pc <- $pc + OFFSET*2                signed compare
0x03.f            if $srA >= 0 $pc <- $pc + OFFSET*2                signed compare
0x04.f            if $srA > 0  $pc <- $pc + OFFSET*2                signed compare
0x05.f            if $srA <= 0 $pc <- $pc + OFFSET*2                signed compare
0x06.f            SII
0x07.f            SII
0x08.f            SII
0x09.f            SII
0x0a.f            SII
0x0b.f            if $frA < 0  $pc <- $pc + OFFSET*2
0x0c.f            if $frA >= 0 $pc <- $pc + OFFSET*2
0x0d.f            if $frA > 0  $pc <- $pc + OFFSET*2
0x0e.f            if $frA <= 0 $pc <- $pc + OFFSET*2

0x1..f            if $rB == $rA   $pc <- $pc + OFFSET*2
0x2..f            if $rB != $rA   $pc <- $pc + OFFSET*2
0x3..f            if $srB < $srA  $pc <- $pc + OFFSET*2             signed compare
0x4..f            if $srB >= $srA $pc <- $pc + OFFSET*2             signed compare
0x5..f            if $rB < $rA    $pc <- $pc + OFFSET*2
0x6..f            if $rB >= $rA   $pc <- $pc + OFFSET*2
0x7..f            SII
0x8..f            SII
0x9..f            SII
0xa..f            SII
0xb..f            SII
0xc..f            SII
0xd..f            if $frB < $frA  $pc <- $pc + OFFSET*2
0xe..f            if $frB >= $frA $pc <- $pc + OFFSET*2

PSEUDO OPS:
    $pc <- $pc + OFFSET*2
    if $srB >= $srA $pc <- $pc + OFFSET*2
    if $srB < $srA  $pc <- $pc + OFFSET*2
    if $rB >= $rA   $pc <- $pc + OFFSET*2
    if $rB < $rA    $pc <- $pc + OFFSET*2
    if $srB == $srA $pc <- $pc + OFFSET*2
    if $srB != $srA $pc <- $pc + OFFSET*2
    if $frB == $frA $pc <- $pc + OFFSET*2
    if $frB != $frA $pc <- $pc + OFFSET*2

OFFSET is sign-extended to 31 bits, shifted left by one before addition.

Form B (group CA):

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|       C       | 1 | 1 | 1 | 1 |       A       | 1 | 1 | 1 | 1 |  |                          OFFSET                               |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  FIELD
  CBAD        OP_CODE                             OPERATION
--------------------------------------------------------------
0x0f.f        if $rA[0]  == 1 $pc <- $pc + OFFSET*2
0x1f.f        if $rA[1]  == 1 $pc <- $pc + OFFSET*2
0x2f.f        if $rA[2]  == 1 $pc <- $pc + OFFSET*2
0x3f.f        if $rA[3]  == 1 $pc <- $pc + OFFSET*2
0x4f.f        if $rA[4]  == 1 $pc <- $pc + OFFSET*2
0x5f.f        if $rA[5]  == 1 $pc <- $pc + OFFSET*2
0x6f.f        if $rA[6]  == 1 $pc <- $pc + OFFSET*2
0x7f.f        if $rA[7]  == 1 $pc <- $pc + OFFSET*2
0x8f.f        if $rA[8]  == 1 $pc <- $pc + OFFSET*2
0x9f.f        if $rA[9]  == 1 $pc <- $pc + OFFSET*2
0xaf.f        if $rA[14] == 1 $pc <- $pc + OFFSET*2
0xbf.f        if $rA[15] == 1 $pc <- $pc + OFFSET*2
0xcf.f        if $rA[16] == 1 $pc <- $pc + OFFSET*2
0xdf.f        if $rA[30] == 1 $pc <- $pc + OFFSET*2
0xef.f        if $rA[31] == 1 $pc <- $pc + OFFSET*2

OFFSET is sign-extended to 31 bits, shifted left by one before addition.

Form C (group CB):

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|       C       |       B       | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |  |                          OFFSET                               |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  FIELD
  CBAD        OP_CODE                             OPERATION
--------------------------------------------------------------
0x0.ff        if $rA[0]  == 0 $pc <- $pc + OFFSET*2
0x1.ff        if $rA[1]  == 0 $pc <- $pc + OFFSET*2
0x2.ff        if $rA[2]  == 0 $pc <- $pc + OFFSET*2
0x3.ff        if $rA[3]  == 0 $pc <- $pc + OFFSET*2
0x4.ff        if $rA[4]  == 0 $pc <- $pc + OFFSET*2
0x5.ff        if $rA[5]  == 0 $pc <- $pc + OFFSET*2
0x6.ff        if $rA[6]  == 0 $pc <- $pc + OFFSET*2
0x7.ff        if $rA[7]  == 0 $pc <- $pc + OFFSET*2
0x8.ff        if $rA[8]  == 0 $pc <- $pc + OFFSET*2
0x9.ff        if $rA[9]  == 0 $pc <- $pc + OFFSET*2
0xa.ff        if $rA[14] == 0 $pc <- $pc + OFFSET*2
0xb.ff        if $rA[15] == 0 $pc <- $pc + OFFSET*2
0xc.ff        if $rA[16] == 0 $pc <- $pc + OFFSET*2
0xd.ff        if $rA[30] == 0 $pc <- $pc + OFFSET*2
0xe.ff        if $rA[31] == 0 $pc <- $pc + OFFSET*2

OFFSET is sign-extended to 31 bits, shifted left by one before addition.

NOTE: in the branch predictor, relative jumps with negative OFFSET VALUE can be assumed to be taken by default.
      Compilers are encouraged to encode back-edges of loops in this encoding to improve branch prediction.

Load/Store
----------

Form A: Indirect load/store

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 1 | 1 | 1 | 1 | 0 |    SOP    |       A       |       D       |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  INST        OP_CODE                   OPERATION
--------------------------------------------------------------
0xf0..        $srD <- MEM8[$rA]          8-bit signed load from MEM[$rA] into $rD
0xf1..        $rD <- MEM8[$rA]           8-bit unsigned load from MEM[$rA] into $rD
0xf2..        $srD <- MEM16[$rA]         16-bit signed load from MEM[$rA] into $rD
0xf3..        $rD <- MEM16[$rA]          16-bit unsigned load from MEM[$rA] into $rD
0xf4..        $rD <- MEM[32][$rA]        32-bit load from MEM[$rA] into $rD
0xf5..        MEM8[$rA] <- $rD           8-bit store to MEM[$rA] from $rD
0xf6..        MEM16[$rA] <- $rD          16-bit store to MEM[$rA] from $rD
0xf7..        MEM[32][$rA] <- $rD        32-bit store to MEM[$rA] from $rD

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 1 | 1 | 1 | 1 | 0 |    SOP    |       A       | 1 | 1 | 1 | 1 |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 1 | 1 | 1 | 1 | 0 |    SOP    | 1 | 1 | 1 | 1 |       D       |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 1 | 1 | 1 | 1 | 0 |    SOP    | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

SII

Form D: Inidirect offset load/store

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 1 | 1 | 1 | 1 | 1 |    SOP    |       A       |       D       |  |                                                             VALUE                                                             |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  INST        OP_CODE                         OPERATION
--------------------------------------------------------------
0xf8..        $srD = MEM8[$rA+VALUE]          8-bit signed load from MEM[$rA+VALUE] into $rD
0xf9..        $rD <- MEM8[$rA+VALUE]          8-bit unsigned load from MEM[$rA+VALUE] into $rD
0xfa..        $srD = MEM16[$rA+VALUE]         16-bit signed load from MEM[$rA+VALUE] into $rD
0xfb..        $rD <- MEM16[$rA+VALUE]         16-bit unsigned load from MEM[$rA+VALUE] into $rD
0xfc..        $rD <- MEM[32][$rA+VALUE]       32-bit load from MEM[$rA+VALUE] into $rD
0xfd..        MEM8[$rA+VALUE] = $rD           8-bit store to MEM[$rA+VALUE] from $rD
0xfe..        MEM16[$rA+VALUE] = $rD          16-bit store to MEM[$rA+VALUE] from $rD
0xff..        MEM[32][$rA+VALUE] = $rD        32-bit store to MEM[$rA+VALUE] from $rD


+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 1 | 1 | 1 | 1 | 1 |    SOP    |       A       | 1 | 1 | 1 | 1 |  |                                                             VALUE                                                             |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  INST        OP_CODE                         OPERATION
--------------------------------------------------------------
0xf8.f        SII
0xf9.f        SII
0xfa.f        SII
0xfb.f        SII
0xfc.f        $pc <- MEM[32][$rA+VALUE]       32-bit load from MEM[$rA+VALUE] into PC
0xfd.f        SII
0xfe.f        SII
0xff.f        SII

Form C: Direct load/store

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 1 | 1 | 1 | 1 | 1 |    SOP    | 1 | 1 | 1 | 1 |       D       |  |                                                             VALUE                                                             |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  INST        OP_CODE                   OPERATION
--------------------------------------------------------------
0xf8f.        $srD <- MEM8[VALUE]       8-bit signed load from MEM[VALUE] into $rD
0xf9f.        $rD <- MEM8[VALUE]        8-bit unsigned load from MEM[VALUE] into $rD
0xfaf.        $srD = MEM16[VALUE]       16-bit signed load from MEM[VALUE] into $rD
0xfbf.        $rD <- MEM16[VALUE]       16-bit unsigned load from MEM[VALUE] into $rD
0xfcf.        $rD <- MEM[32][VALUE]     32-bit load from MEM[VALUE] into $rD
0xfdf.        MEM8[VALUE] = $rD         8-bit store to MEM[VALUE] from $rD
0xfef.        MEM16[VALUE] = $rD        16-bit store to MEM[VALUE] from $rD
0xfff.        MEM[32][VALUE] = $rD      32-bit store to MEM[VALUE] from $rD

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 1 | 1 | 1 | 1 | 1 |    SOP    | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |  |                                                             VALUE                                                             |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

  INST        OP_CODE                   OPERATION
--------------------------------------------------------------
0xf8ff        SII
0xf9ff        SII
0xfaff        SII
0xfbff        SII
0xfcff        $pc <- MEM[32][VALUE]      32-bit load from MEM[VALUE] into PC
0xfdff        SII
0xfeff        SII
0xffff        SII


NOTE: form A with D==0xf is invalid to simplify instruction (length) decode. This combination generates SII
      This means that load/store TPC from register offset can only be achieved using fomr D and VALUE==0



DECODE NOTES:
=============

Instruction encoding is such that the following condition can be used to determine if the FIELD_E is needed or not:
  &inst[15:11] | &inst[11:8] | &inst[7:4] | &inst[3:0]
  
The size of FIELD_E can be determined by:
  &inst[15:11] | (&inst[7:4] & !&inst[3:0])

The first register file read port address of the register file comes from:
  TBD
  
The second register file read port address of the register file comes from:
  TBD

The register file write port address of the register file comes from:
  inst[3:0]
  NOTE: TPC and SPC are special and needs special decoding logic: they are written by all sort of weird combos of bit-fields

Branches can be identified by:
  TBD

NOTE:
========
CALLs use link registers:
$r2 <- $pc+<offset>
$pc <- <callee>

<offset> could be 8, 6 or 4, depending on the encoding size of the call.

Upon entry callee saves $r2 if needed (along with all other callee-saved registers per the ABI)
Upon return, all saved registers (including $r2) are restored, then:

RETURN:
$pc <- $r2

Notice how this is only one instructions longer than the traditional link approach as the 
stack-adjustment and the save/restore of the link register would be there in most cases anyways.
The splitting of the link into two instruction allows us to not have two forms of all possible
branches, and so all possible branches *can* be calls as well.

